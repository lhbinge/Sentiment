}
errors1 <- cbind(errors1, exp.error$error1)
colnames(errors1)[tel] <- as.character(i)
errors2 <- cbind(errors2, exp.error$error2)
colnames(errors2)[tel] <- as.character(i)
errors3 <- cbind(errors3, exp.error$error3)
colnames(errors3)[tel] <- as.character(i)
errors4 <- cbind(errors4, exp.error$error4)
colnames(errors4)[tel] <- as.character(i)
errors5 <- cbind(errors5, exp.error$error5)
colnames(errors5)[tel] <- as.character(i)
errors6 <- cbind(errors6, exp.error$error6)
colnames(errors6)[tel] <- as.character(i)
}
errors1 <- indicators.V[,c(1,9)]
errors2 <- indicators.V[,c(1,9)]
errors3 <- indicators.V[,c(1,9)]
errors4 <- indicators.V[,c(1,9)]
errors5 <- indicators.V[,c(1,9)]
errors6 <- indicators.V[,c(1,9)]
tel <- 2
for(i in levels(BER.V$id)){
tel <- tel + 1
#BER.V$counter <- as.numeric(BER.V$survey)
exp.error <- indicators.V[,c(1,9)]
data <- subset(BER.V, BER.V$id==i)
#data <- data[order(data$counter),]
exp.error <- merge(exp.error, data, by.x="Date",by.y="surveyQ", all.x = TRUE)
for(t in 1:(nrow(exp.error))) {
exp.error$error1[t] <- exp.error$Q3A[t+1] - exp.error$Q3P[t]
exp.error$error2[t] <- exp.error$Q2A[t+1] - exp.error$Q2P[t]
exp.error$error3[t] <- exp.error$Q8A[t+1] - exp.error$Q8P[t]
exp.error$error4[t] <- exp.error$Q7A[t+1] - exp.error$Q7P[t]
exp.error$error6[t] <- exp.error$Q12A[t+1] - exp.error$Q12P[t]
exp.error$error6[t] <- exp.error$Q11A[t+1] - exp.error$Q11P[t]
}
errors1 <- cbind(errors1, exp.error$error1)
colnames(errors1)[tel] <- as.character(i)
errors2 <- cbind(errors2, exp.error$error2)
colnames(errors2)[tel] <- as.character(i)
errors3 <- cbind(errors3, exp.error$error3)
colnames(errors3)[tel] <- as.character(i)
errors4 <- cbind(errors4, exp.error$error4)
colnames(errors4)[tel] <- as.character(i)
errors5 <- cbind(errors5, exp.error$error5)
colnames(errors5)[tel] <- as.character(i)
errors6 <- cbind(errors6, exp.error$error6)
colnames(errors6)[tel] <- as.character(i)
}
tel <- 2
for(i in levels(BER.V$id)){
tel <- tel + 1
#BER.V$counter <- as.numeric(BER.V$survey)
exp.error <- indicators.V[,c(1,9)]
data <- subset(BER.V, BER.V$id==i)
#data <- data[order(data$counter),]
exp.error <- merge(exp.error, data, by.x="Date",by.y="surveyQ", all.x = TRUE)
for(t in 1:(nrow(exp.error))) {
exp.error$error1[t] <- exp.error$Q3A[t+1] - exp.error$Q3P[t]
exp.error$error2[t] <- exp.error$Q2A[t+1] - exp.error$Q2P[t]
exp.error$error3[t] <- exp.error$Q8A[t+1] - exp.error$Q8P[t]
exp.error$error4[t] <- exp.error$Q7A[t+1] - exp.error$Q7P[t]
exp.error$error5[t] <- exp.error$Q12A[t+1] - exp.error$Q12P[t]
exp.error$error6[t] <- exp.error$Q11A[t+1] - exp.error$Q11P[t]
}
errors1 <- cbind(errors1, exp.error$error1)
colnames(errors1)[tel] <- as.character(i)
errors2 <- cbind(errors2, exp.error$error2)
colnames(errors2)[tel] <- as.character(i)
errors3 <- cbind(errors3, exp.error$error3)
colnames(errors3)[tel] <- as.character(i)
errors4 <- cbind(errors4, exp.error$error4)
colnames(errors4)[tel] <- as.character(i)
errors5 <- cbind(errors5, exp.error$error5)
colnames(errors5)[tel] <- as.character(i)
errors6 <- cbind(errors6, exp.error$error6)
colnames(errors6)[tel] <- as.character(i)
}
uncert <- transform(errors1, SD=apply(errors1[,c(-1,-2)],1,se))[,c(1,ncol(errors1)+1)]
indicators.V <- cbind(indicators.V, Uncert_ee.prod.new = uncert[,2])
uncert <- transform(errors2, SD=apply(errors2[,c(-1,-2)],1,se))[,c(1,ncol(errors2)+1)]
indicators.V <- cbind(indicators.V, Uncert_ee.GBC.new = uncert[,2])
uncert <- transform(errors1, SD=apply(errors3[,c(-1,-2)],1,se))[,c(1,ncol(errors3)+1)]
indicators.V <- cbind(indicators.V, Uncert_ee.prod.used = uncert[,2])
uncert <- transform(errors2, SD=apply(errors4[,c(-1,-2)],1,se))[,c(1,ncol(errors4)+1)]
indicators.V <- cbind(indicators.V, Uncert_ee.GBC.used = uncert[,2])
uncert <- transform(errors1, SD=apply(errors5[,c(-1,-2)],1,se))[,c(1,ncol(errors5)+1)]
indicators.V <- cbind(indicators.V, Uncert_ee.prod.spare = uncert[,2])
uncert <- transform(errors2, SD=apply(errors6[,c(-1,-2)],1,se))[,c(1,ncol(errors6)+1)]
indicators.V <- cbind(indicators.V, Uncert_ee.GBC.spare = uncert[,2])
View(indicators.V)
indicator_plot <- indicators.V[,c(1,2,3,4,8,9,10)]
indicator_plot <- melt(indicator_plot, id="Date")  # convert to long format
g <- ggplot(data=indicator_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_point(size = 3)
g <- g + geom_line()
g <- g + ylab("Indicator")
g <- g + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + theme(legend.title=element_blank())
g
indicator_plot <- indicators.V[,c(1,17:26)]
indicator_plot <- melt(indicator_plot, id="Date")  # convert to long format
g <- ggplot(data=indicator_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_point(size = 3)
g <- g + geom_line()
g <- g + ylab("Indicator")
g <- g + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + theme(legend.title=element_blank())
g
# Calculate Response Rates
countNR <- function(data) { sum(is.na(data))/NROW(data) }
NRR.V <- aggregate(BER.V, by=list(BER.V$surveyQ), FUN=countNR)
BER.S <- read.csv("Services.csv", header=TRUE, sep=";",na.strings = "", skipNul = TRUE)
View(BER.S)
colnames(BER.S)[1:6] <- c("region","id","sector","weight","factor","surveyQ")
BER.S$surveyQ <- toupper(BER.S$surveyQ)
BER.S[nrow(BER.S)+1,1:5] <- BER.S[nrow(BER.S),1:5]
BER.S[nrow(BER.S),"surveyQ"] <- "05Q4"
BER.S$region <- factor(BER.S$region)
BER.S$sector <- factor(BER.S$sector) #could include labels
BER.S$id <- factor(BER.S$id)
BER.S$surveyQ <- factor(BER.S$surveyQ)
#BER.S$surveyQ <- factor(BER.S$surveyQ, levels=c(levels(BER.S$surveyQ),"05Q4"))
# replace 1,2,3 (Up, Same, Down) responses with 1,0,-1
for(i in 7:21) {
BER.S[,i] <- replace(BER.S[,i], BER.S[,i]==2, 0)
BER.S[,i] <- replace(BER.S[,i], BER.S[,i]==3,-1)
}
BER.S$Q1 <- replace(BER.S$Q1, BER.S$Q1==0,-1) # replace 0 (Unsatisfactory) responses with -1
indicators.S <- aggregate(BER.S$Q1, by=list(BER.S$surveyQ), FUN=mean, na.rm=TRUE)
colnames(indicators.S) <- c("Date","Conf_cc")
indicators.S <- cbind(indicators.S, Act_prod = aggregate(BER.S$Q3A, by=list(BER.S$surveyQ), FUN=mean, na.rm=TRUE)[,2])
indicators.S <- cbind(indicators.S, Conf_prod = aggregate(BER.S$Q3P, by=list(BER.S$surveyQ), FUN=mean, na.rm=TRUE)[,2])
indicators.S <- cbind(indicators.S, Act_GBC = aggregate(BER.S$Q2A, by=list(BER.S$surveyQ), FUN=mean, na.rm=TRUE)[,2])
indicators.S <- cbind(indicators.S, Conf_GBC = aggregate(BER.S$Q2P, by=list(BER.S$surveyQ), FUN=mean, na.rm=TRUE)[,2])
indicators.S <- cbind(indicators.S, Empl = aggregate(BER.S$Q4A, by=list(BER.S$surveyQ), FUN=mean, na.rm=TRUE)[,2])
altBER <- BER.S
altBER$Q4A <- replace(altBER$Q4A, altBER$Q4A==-1,1) # replace -1 (Down) responses with 1
indicators.S <- cbind(indicators.S, Empl_turn = aggregate(altBER$Q4A, by=list(altBER$surveyQ), FUN=mean, na.rm=TRUE)[,2])
# Kan dit verander na standard error or standard deviation?
se <- function(x) sqrt(var(x,na.rm=TRUE)/length(na.omit(x))*(length(na.omit(x))-1)) #adjust for (n-1)
indicators.S <- cbind(indicators.S, Uncert_fl.prod = aggregate(BER.S$Q3P, by=list(BER.S$surveyQ), FUN=se)[,2])
indicators.S <- cbind(indicators.S, Uncert_fl.GBC = aggregate(BER.S$Q2P, by=list(BER.S$surveyQ), FUN=se)[,2])
dups <- BER.S[duplicated(BER.S[,c("id","surveyQ")]) | duplicated(BER.S[,c("id","surveyQ")], fromLast = TRUE),]
BER.S <- BER.S[!duplicated(BER.S[,c("id","surveyQ")]),]
View(dups)
errors1 <- indicators.S[,c(1,9)]
errors2 <- indicators.S[,c(1,9)]
tel <- 2
for(i in levels(BER.S$id)){
tel <- tel + 1
#BER.S$counter <- as.numeric(BER.S$survey)
exp.error <- indicators.S[,c(1,9)]
data <- subset(BER.S, BER.S$id==i)
#data <- data[order(data$counter),]
exp.error <- merge(exp.error, data, by.x="Date",by.y="surveyQ", all.x = TRUE)
for(t in 1:(nrow(exp.error))) {
exp.error$error1[t] <- exp.error$Q3A[t+1] - exp.error$Q3P[t]
exp.error$error2[t] <- exp.error$Q2A[t+1] - exp.error$Q2P[t]
}
errors1 <- cbind(errors1, exp.error$error1)
colnames(errors1)[tel] <- as.character(i)
errors2 <- cbind(errors2, exp.error$error2)
colnames(errors2)[tel] <- as.character(i)
}
# Kan dit verander na standard error or standard deviation?
uncert <- transform(errors1, SD=apply(errors1[,c(-1,-2)],1,se))[,c(1,ncol(errors1)+1)]
indicators.S <- cbind(indicators.S, Uncert_ee.prod = uncert[,2])
uncert <- transform(errors2, SD=apply(errors2[,c(-1,-2)],1,se))[,c(1,ncol(errors2)+1)]
indicators.S <- cbind(indicators.S, Uncert_ee.GBC = uncert[,2])
indicator_plot <- indicators.S[,c(1,2,4,6)]
indicator_plot <- melt(indicator_plot, id="Date")  # convert to long format
g <- ggplot(data=indicator_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_point(size = 3)
g <- g + geom_line()
g <- g + ylab("Indicator")
g <- g + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + theme(legend.title=element_blank())
g
indicator_plot <- indicators.S[,c(1,9,10,11,12)]
indicator_plot <- melt(indicator_plot, id="Date")  # convert to long format
g <- ggplot(data=indicator_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_point(size = 3)
g <- g + geom_line()
g <- g + ylab("Indicator")
g <- g + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + theme(legend.title=element_blank())
g
# Calculate Response Rates
countNR <- function(data) { sum(is.na(data))/NROW(data) }
NRR.S <- aggregate(BER.S, by=list(BER.S$surveyQ), FUN=countNR)
?rbind
BER <- rbind(BER.M$Q20,BER.B$Q1,BER.T$Q1,BER.V$Q1,BER.S$Q1)
?rbind_all()
BER <- rbind_all(BER.M$Q20,BER.B$Q1,BER.T$Q1,BER.V$Q1,BER.S$Q1)
BER <- rbind_all(BER.M$Q20,BER.B$Q1)
BER <- rbind(BER.M$Q20,BER.B$Q1)
View(BER)
View(BER.M)
BER <- rbind(BER.M[,c("surveyQ","Q20")],BER.B[,c("surveyQ","Q1")])
rm(BER)
BER <- rbind(BER.M[,c("surveyQ","Q20")],BER.B[,c("surveyQ","Q1")])
BER <- BER.M[,c("surveyQ","Q20")]
BER <- rbind(BER,BER.B[,c("surveyQ","Q1")])
BER <- rbind(BER,BER.B[-1,c("surveyQ","Q1")])
colnames(indicators.M) <- c("surveyQ","Q1")
colnames(BER) <- c("surveyQ","Q1")
BER <- rbind(BER,BER.B[,c("surveyQ","Q1")])
BER <- BER.M[,c("surveyQ","Q20")]
colnames(BER) <- c("surveyQ","Q1")
BER <- rbind(BER,BER.B[,c("surveyQ","Q1")],BER.T[,c("surveyQ","Q1")],BER.V[,c("surveyQ","Q1")],BER.S[,c("surveyQ","Q1")])
indicators <- aggregate(BER$Q1, by=list(BER$surveyQ), FUN=mean, na.rm=TRUE)
View(indicators)
colnames(indicators) <- c("Date","Conf_cc")
View(indicators.B)
ER <- BER.M[,c("surveyQ","Q20","Q3A","Q3P","Q7A","Q7P")]
colnames(BER) <- c("surveyQ","Q1","Q3A","Q3P","Q2A","Q2P")
BER <- BER.M[,c("surveyQ","Q20","Q3A","Q3P","Q7A","Q7P")]
colnames(BER) <- c("surveyQ","Q1","Q3A","Q3P","Q2A","Q2P")
BER <- rbind(BER,BER.B[,c("surveyQ","Q1","Q3A","Q3P","Q2A","Q2P")],BER.T[,c("surveyQ","Q1","Q3A","Q3P","Q2A","Q2P")],
BER.V[,c("surveyQ","Q1","Q3A","Q3P","Q2A","Q2P")],BER.S[,c("surveyQ","Q1","Q3A","Q3P","Q2A","Q2P")])
indicators <- cbind(indicators, Act_prod = aggregate(BER$Q3A, by=list(BER$surveyQ), FUN=mean, na.rm=TRUE)[,2])
indicators <- cbind(indicators, Conf_prod = aggregate(BER$Q3P, by=list(BER.M$surveyQ), FUN=mean, na.rm=TRUE)[,2])
indicators <- cbind(indicators, Conf_prod = aggregate(BER$Q3P, by=list(BER$surveyQ), FUN=mean, na.rm=TRUE)[,2])
indicators <- cbind(indicators, Act_GBC = aggregate(BER$Q2A, by=list(BER$surveyQ), FUN=mean, na.rm=TRUE)[,2])
indicators <- cbind(indicators, Conf_GBC = aggregate(BER$Q2P, by=list(BER$surveyQ), FUN=mean, na.rm=TRUE)[,2])
indicator_plot <- indicators[,c(1,2,4,6)]
indicator_plot <- melt(indicator_plot, id="Date")  # convert to long format
g <- ggplot(data=indicator_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_point(size = 3)
g <- g + geom_line()
g <- g + ylab("Indicator")
g <- g + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + theme(legend.title=element_blank())
g
altBER <- BER.M[,c("surveyQ","Q8A")]
colnames(altBER) <- c("surveyQ","Q4A")
altBER <- rbind(altBER,BER.B[,c("surveyQ","Q4A")],BER.T[,c("surveyQ","Q5A")],BER.S[,c("surveyQ","Q4A")])
View(BER.V)
BER.V[,"Q4A"] <- NA
colnames(BER.T$Q5A) <- "Q4A"
View(BER.T)
BER <- BER.M[,c("surveyQ","Q20","Q3A","Q3P","Q7A","Q7P")]
View(BER.B)
BER <- rbind(BER,BER.B[,c(6,7,10,11,8,9)])
?setNames
?rev
?bind_rows
?rbind.fill
altBER <- BER.M[,c("surveyQ","Q8A")]
View(altBER)
rbind( altBER , setNames( BER.M$Q5A , "Q8A" ) )
altBER <- rbind( altBER , setNames( BER.M$Q5A , "Q8A" ) )
altBER <- BER.M[,c("surveyQ","Q8A")]
altBER <- rbind( altBER , setNames( BER.M$Q5A , "Q8A" ) )
altBER <- BER.M[,c("surveyQ","Q8A")]
setNames( BER.M$Q5A , "Q8A" )
altBER <- BER.M[,c("surveyQ","Q8A")]
altBER <- rbind( altBER , setNames( BER.M$Q5A , c("Q8A") ) )
altBER <- BER.M[,c("surveyQ","Q8A")]
altBER <- rbind( altBER , setNames( BER.B$surveyQ, BER.M$Q5A , c("surveyQ","Q8A") ) )
altBER <- rbind( altBER , setNames( c(BER.B$surveyQ, BER.M$Q5A) , c("surveyQ","Q8A") ) )
unname(BER.B)
altBER <- BER.M[,c("surveyQ","Q8A")]
altBER <- rbind( altBER , unname(BER.B[,c(6,14)]))
BER <- BER.M[,c("surveyQ","Q20","Q3A","Q3P","Q7A","Q7P","Q8A")]
BER <- unname(BER)
BER
BER <- rbind(BER,BER.B[,c("surveyQ","Q1","Q3A","Q3P","Q2A","Q2P","Q5A")])
BER <- rbind(BER,unname(BER.B[,c("surveyQ","Q1","Q3A","Q3P","Q2A","Q2P","Q5A")]))
tempBER.M <- BER.M[,c("surveyQ","Q20","Q3A","Q3P","Q7A","Q7P","Q8A")]
colnames(tempBER.M) <- c("surveyQ","Q1","Q3A","Q3P","Q2A","Q2P","Q4A")
tempBER.T <- BER.T[,c("surveyQ","Q1","Q3A","Q3P","Q2A","Q2P","Q5A")]
colnames(tempBER.T) <- c("surveyQ","Q1","Q3A","Q3P","Q2A","Q2P","Q4A")
tempBER.V <- BER.V[,c("surveyQ","Q1","Q3A","Q3P","Q2A","Q2P","Q4A")]
tempBER.V[,"Q4A"] <- NA
BER <- tempBER.M
BER <- rbind(BER,BER.B[,c("surveyQ","Q1","Q3A","Q3P","Q2A","Q2P","Q4A")],tempBER.T,tempBER.V,
BER.S[,c("surveyQ","Q1","Q3A","Q3P","Q2A","Q2P","Q4A")])
indicators <- aggregate(BER$Q1, by=list(BER$surveyQ), FUN=mean, na.rm=TRUE)
colnames(indicators) <- c("Date","Conf_cc")
indicators <- cbind(indicators, Act_prod = aggregate(BER$Q3A, by=list(BER$surveyQ), FUN=mean, na.rm=TRUE)[,2])
indicators <- cbind(indicators, Conf_prod = aggregate(BER$Q3P, by=list(BER$surveyQ), FUN=mean, na.rm=TRUE)[,2])
indicators <- cbind(indicators, Act_GBC = aggregate(BER$Q2A, by=list(BER$surveyQ), FUN=mean, na.rm=TRUE)[,2])
indicators <- cbind(indicators, Conf_GBC = aggregate(BER$Q2P, by=list(BER$surveyQ), FUN=mean, na.rm=TRUE)[,2])
indicators <- cbind(indicators, Empl = aggregate(BER$Q4A, by=list(BER$surveyQ), FUN=mean, na.rm=TRUE)[,2])
altBER <- BER
altBER$Q4A <- replace(altBER$Q4A, altBER$Q4A==-1,1) # replace -1 (Down) responses with 1
indicators <- cbind(indicators, Empl_turn = aggregate(altBER$Q4A, by=list(altBER$surveyQ), FUN=mean, na.rm=TRUE)[,2])
View(indicators)
#Rename BER.B$Q5A temporarily and create NAs for BER.V$empl
tempBER.M <- BER.M[,c("id","surveyQ","Q20","Q3A","Q3P","Q7A","Q7P","Q8A")]
colnames(tempBER.M) <- c("id","surveyQ","Q1","Q3A","Q3P","Q2A","Q2P","Q4A")
tempBER.T <- BER.T[,c("id","surveyQ","Q1","Q3A","Q3P","Q2A","Q2P","Q5A")]
colnames(tempBER.T) <- c("id","surveyQ","Q1","Q3A","Q3P","Q2A","Q2P","Q4A")
tempBER.V <- BER.V[,c("id","surveyQ","Q1","Q3A","Q3P","Q2A","Q2P","Q4A")]
tempBER.V[,"Q4A"] <- NA
BER <- tempBER.M
BER <- rbind(BER,BER.B[,c("id","surveyQ","Q1","Q3A","Q3P","Q2A","Q2P","Q4A")],tempBER.T,tempBER.V,
BER.S[,c("id","surveyQ","Q1","Q3A","Q3P","Q2A","Q2P","Q4A")])
indicators <- aggregate(BER$Q1, by=list(BER$surveyQ), FUN=mean, na.rm=TRUE)
colnames(indicators) <- c("Date","Conf_cc")
indicators <- cbind(indicators, Act_prod = aggregate(BER$Q3A, by=list(BER$surveyQ), FUN=mean, na.rm=TRUE)[,2])
indicators <- cbind(indicators, Conf_prod = aggregate(BER$Q3P, by=list(BER$surveyQ), FUN=mean, na.rm=TRUE)[,2])
indicators <- cbind(indicators, Act_GBC = aggregate(BER$Q2A, by=list(BER$surveyQ), FUN=mean, na.rm=TRUE)[,2])
indicators <- cbind(indicators, Conf_GBC = aggregate(BER$Q2P, by=list(BER$surveyQ), FUN=mean, na.rm=TRUE)[,2])
indicators <- cbind(indicators, Empl = aggregate(BER$Q4A, by=list(BER$surveyQ), FUN=mean, na.rm=TRUE)[,2])
altBER <- BER
altBER$Q4A <- replace(altBER$Q4A, altBER$Q4A==-1,1) # replace -1 (Down) responses with 1
indicators <- cbind(indicators, Empl_turn = aggregate(altBER$Q4A, by=list(altBER$surveyQ), FUN=mean, na.rm=TRUE)[,2])
# Kan dit verander na standard error or standard deviation?
se <- function(x) sqrt(var(x,na.rm=TRUE)/length(na.omit(x))*(length(na.omit(x))-1)) #adjust for (n-1)
indicators <- cbind(indicators, Uncert_fl.prod = aggregate(BER$Q3P, by=list(BER$surveyQ), FUN=se)[,2])
indicators <- cbind(indicators, Uncert_fl.GBC = aggregate(BER$Q2P, by=list(BER$surveyQ), FUN=se)[,2])
#The expectations of firms in question 31 in period t are compared to the realization of firms in question 7A in period t+4.
#Also compare the expectations of firms in questions 3P & 7P in period t to the realizations in questions 3A & 7A in period t+1.
dups <- BER[duplicated(BER[,c("id","surveyQ")]) | duplicated(BER[,c("id","surveyQ")], fromLast = TRUE),]
uniBER <- BER[!duplicated(BER[,c("id","surveyQ")]),]
errors1 <- indicators[,c(1,9)]
errors2 <- indicators[,c(1,9)]
tel <- 2
for(i in levels(uniBER$id)){
tel <- tel + 1
#BER.S$counter <- as.numeric(BER.S$survey)
exp.error <- indicators[,c(1,9)]
data <- subset(uniBER, uniBER$id==i)
#data <- data[order(data$counter),]
exp.error <- merge(exp.error, data, by.x="Date",by.y="surveyQ", all.x = TRUE)
for(t in 1:(nrow(exp.error))) {
exp.error$error1[t] <- exp.error$Q3A[t+1] - exp.error$Q3P[t]
exp.error$error2[t] <- exp.error$Q2A[t+1] - exp.error$Q2P[t]
}
errors1 <- cbind(errors1, exp.error$error1)
colnames(errors1)[tel] <- as.character(i)
errors2 <- cbind(errors2, exp.error$error2)
colnames(errors2)[tel] <- as.character(i)
}
# Kan dit verander na standard error or standard deviation?
uncert <- transform(errors1, SD=apply(errors1[,c(-1,-2)],1,se))[,c(1,ncol(errors1)+1)]
indicators <- cbind(indicators, Uncert_ee.prod = uncert[,2])
uncert <- transform(errors2, SD=apply(errors2[,c(-1,-2)],1,se))[,c(1,ncol(errors2)+1)]
indicators <- cbind(indicators, Uncert_ee.GBC = uncert[,2])
indicator_plot <- indicators[,c(1,2,4,6)]
indicator_plot <- melt(indicator_plot, id="Date")  # convert to long format
g <- ggplot(data=indicator_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_point(size = 3)
g <- g + geom_line()
g <- g + ylab("Indicator")
g <- g + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + theme(legend.title=element_blank())
g
indicator_plot <- indicators.S[,c(1,9,10,11,12)]
indicator_plot <- melt(indicator_plot, id="Date")  # convert to long format
g <- ggplot(data=indicator_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_point(size = 3)
g <- g + geom_line()
g <- g + ylab("Indicator")
g <- g + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + theme(legend.title=element_blank())
g
indicator_plot <- indicators[,c(1,9,10,11,12)]
indicator_plot <- melt(indicator_plot, id="Date")  # convert to long format
g <- ggplot(data=indicator_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_point(size = 3)
g <- g + geom_line()
g <- g + ylab("Indicator")
g <- g + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + theme(legend.title=element_blank())
g
# Calculate Response Rates
countNR <- function(data) { sum(is.na(data))/NROW(data) }
NRR <- aggregate(BER, by=list(BER$surveyQ), FUN=countNR)
View(NRR)
NRR_plot <- NRR[,c(1,4,5,6,7,8,9)]
indicator_plot <- melt(indicator_plot, id="Date")  # convert to long format
g <- ggplot(data=indicator_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_point(size = 3)
g <- g + geom_line()
g <- g + ylab("Indicator")
g <- g + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + theme(legend.title=element_blank())
g
NRR_plot <- NRR[,c(1,4,5,6,7,8,9)]
NRR_plot <- melt(NRR_plot, id="Date")  # convert to long format
g <- ggplot(data=NRR_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_point(size = 3)
g <- g + geom_line()
g <- g + ylab("Indicator")
g <- g + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + theme(legend.title=element_blank())
g
NRR_plot <- NRR[,c(1,4,5,6,7,8,9)]
NRR_plot <- melt(NRR_plot, id="Group.1")  # convert to long format
g <- ggplot(data=NRR_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_point(size = 3)
g <- g + geom_line()
g <- g + ylab("Indicator")
g <- g + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + theme(legend.title=element_blank())
g
View(NRR_plot)
NRR_plot <- NRR[,c(1,4,5,6,7,8,9)]
NRR_plot <- melt(NRR_plot, id="Group.1")  # convert to long format
g <- ggplot(data=NRR_plot,aes(x=Group.1, y=value, group=variable, colour=variable))
g <- g + geom_point(size = 3)
g <- g + geom_line()
g <- g + ylab("Indicator")
g <- g + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + theme(legend.title=element_blank())
g
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$SuperPlasticizer)
View(training)
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
log(0)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
?grep
grep("[IL]", names(training), value=TRUE)
grep("^[IL]", names(training), value=TRUE)
grep("^[I&L]", names(training), value=TRUE)
training[,grep("^[I][L]", names(df), value=TRUE)]
grep("^[I][L]", names(training), value=TRUE)
trainingIL <- training[,grep("^[I][L]", names(training))]
?preProcess
preProc <- preProcess(trainingIL,method="pca",pcaComp=2)
summary(preProc)
preProc <- preProcess(trainingIL,method="pca",thresh=0.8)
preProcess(trainingIL,method="pca",thresh=0.8)
trainingIL <- cbind(trainingIL,training$diagnosis)
trainPC <- predict(preProc,trainingIL)
modelFitPC <- train(trainingIL$diagnosis ~., method="glm",data=trainPC)
View(trainingIL)
modelFitPC <- train(trainingIL$training$diagnosis ~., method="glm",data=trainPC)
modelFitPC <- train(trainingIL$'training$diagnosis' ~., method="glm",data=trainPC)
testPC <- predict(preProc,testing)
confusionMatrix(testing$diagnosis,predict(modelFitPC,testPC))
confusionMatrix(testing$diagnosis,predict(modelFitPC,testPC))
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
grep("^[I][L]", names(training), value=TRUE)
trainingIL <- training[,grep("^[I][L]", names(training))]
preProc <- preProcess(trainingIL,method="pca",thresh=0.8)
trainingIL <- cbind(trainingIL,diagnosis=training$diagnosis)
trainPC <- predict(preProc,trainingIL)
modelFitPC <- train(trainingIL$'training$diagnosis' ~., method="glm",data=trainPC)
testPC <- predict(preProc,testing)
confusionMatrix(testing$diagnosis,predict(modelFitPC,testPC))
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
grep("^[I][L]", names(training), value=TRUE)
trainingIL <- training[,grep("^[I][L]", names(training))]
preProc <- preProcess(trainingIL,method="pca",thresh=0.8)
trainingIL <- cbind(trainingIL,diagnosis=training$diagnosis)
trainPC <- predict(preProc,trainingIL)
modelFitPC <- train(trainingIL$diagnosis ~., method="glm",data=trainPC)
testPC <- predict(preProc,testing)
confusionMatrix(testing$diagnosis,predict(modelFitPC,testPC))
modelFitLM <- train(trainingIL$diagnosis ~., method="lm",data=trainingIL)
testLM <- predict(modelFitLM,testing)
confusionMatrix(testing$diagnosis,predict(modelFitLM,testLM))
modelFitLM <- train(trainingIL$diagnosis ~., method="lm",data=trainingIL)
str(trainingIL$diagnosis)
modelFitLM <- train(diagnosis ~., method="lm",data=trainingIL)
grep("^[I][L]", names(training), value=TRUE)
trainingIL <- training[,grep("^[I][L]", names(training))]
modelFitLM <- train(diagnosis ~., method="lm",data=trainingIL)
modelFitLM <- lm(diagnosis ~., data=trainingIL)
trainingIL <- cbind(trainingIL,diagnosis=training$diagnosis)
modelFitLM <- lm(diagnosis ~., data=trainingIL)
modelFitLM <- train(diagnosis ~., method="glm",data=trainingIL)
testLM <- predict(modelFitLM,testing)
confusionMatrix(testing$diagnosis,predict(modelFitLM,testLM))
View(testing)
str(testing$diagnosis)
confusionMatrix(testing$diagnosis,trainingIL$diagnosis)
confusionMatrix(testing$diagnosis,testLM)
